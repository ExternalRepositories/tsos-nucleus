//By Tsuki Superior
#ifndef __TSOS_NUCLEUS_CORE__
#define __TSOS_NUCLEUS_CORE__

//This is the default value for a value contained normally in current_config.hpp
//I'm just going to put these here so my IDE doesn't throw a fit
#define MACHINE UNKNOWN
#define VIDEO_DRIVERS \
  {                   \
  }
#define INPUT_DRIVERS \
  {                   \
  }
#define FILESYSTEM_DRIVERS \
  {                        \
  }
#define BOOT_DRIVERS \
  {                  \
  }
#define SERIAL_DRIVERS \
  {                    \
  }
#define PROCESS_DRIVERS \
  {                     \
  }
#define DISK_DRIVERS \
  {                  \
  }
#define SOUND_DRIVERS \
  {                   \
  }

#define VIDEO_DRIVER_COUNT 0
#define INPUT_DRIVER_COUNT 0
#define FILESYSTEM_DRIVER_COUNT 0
#define BOOT_DRIVER_COUNT 0
#define SERIAL_DRIVER_COUNT 0
#define PROCESS_DRIVER_COUNT 0
#define DISK_DRIVER_COUNT 0
#define SOUND_DRIVER_COUNT 0

//Includes TS/OS's internal data structures
//Allows better interaction with the kernel
//Statically linked to the kernel
#include "libtsos.hpp"

#include "boot.hpp"
#include "disk.hpp"
#include "filesystem.hpp"
#include "input.hpp"
#include "process.hpp"
#include "serial.hpp"
#include "sound.hpp"
#include "video.hpp"

//This file is generated by the Makefile
#include "current_config.hpp"

//The main class collecting the TS/OS nucleus api
class Tsos
{
public:
  //Constructor
  Tsos(void);

  //Destructor
  ~Tsos(void);

  //The module being used to control video
  Video video;

  //The module being used to process input
  Input input;

  //The module being used to control the filesystem
  Filesystem filesystem;

  //The module being used to control boot
  Boot boot;

  //The module being used to control serial
  Serial serial;

  //The module being used to control process
  Process process;

  //The module being used to control disks
  Disk disk;

  //The module being used to control sound
  Sound sound;

protected:
  //The version of TS/OS being used here
  unsigned float version;

  //The code name to TS/OS being used here
  char *code_name;

  //The 1-2 letter code name of TS/OS being used here
  char *short_code_name;

  //The type of machine being run here
  machine_type machine = MACHINE;
};

class Driver
{
public:
  //Constructor
  Driver(void);

  //Destructor
  ~Driver(void);

  //A function called to determine if a driver should be used.
  virtual BOOLEAN detectsystem(void){};
};

//The base class of TS/OS modules
class Module
{
public:
  //Constructor
  Module(void);

  //Destructor
  ~Module(void);

  //The full name of the modules's target
  const char *name;

  //Attach a driver
  BOOLEAN attachdriver(Driver d);
};

//The machine that this is
enum machine_type
{
  PERSONAL_COMPUTER,
  DOT_MATRIX_GAME,
  GAMEBOY_ADVANCE,
  GENERIC,
  UNKNOWN
}

#endif